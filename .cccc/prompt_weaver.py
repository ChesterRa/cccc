# -*- coding: utf-8 -*-
from pathlib import Path
from typing import Dict, Any, Optional, Tuple

from por_manager import ensure_por, por_path
import json

def _read_yaml_or_json(p: Path) -> Dict[str, Any]:
    try:
        import yaml  # type: ignore
        return yaml.safe_load(p.read_text(encoding="utf-8")) or {}
    except Exception:
        try:
            return json.loads(p.read_text(encoding="utf-8"))
        except Exception:
            return {}

def _rules_dir(home: Path) -> Path:
    d = home / "rules"
    d.mkdir(parents=True, exist_ok=True)
    return d

def _state_dir(home: Path) -> Path:
    d = home / "state"
    d.mkdir(parents=True, exist_ok=True)
    return d

def _calc_rules_hash(home: Path) -> str:
    # Hash a subset of settings that affect rules text
    import hashlib
    parts: list[str] = []
    for name in [
        "settings/cli_profiles.yaml",
        "settings/governance.yaml",
        "settings/coach_helper.yaml",
        "settings/telegram.yaml",
        "settings/slack.yaml",
        "settings/discord.yaml",
    ]:
        fp = home / name
        if fp.exists():
            try:
                parts.append(fp.read_text(encoding="utf-8"))
            except Exception:
                pass
    payload = "\n".join(parts) + "\nGEN:1"  # bump suffix to invalidate older generations
    return hashlib.sha1(payload.encode("utf-8", errors="replace")).hexdigest()

def _is_im_enabled(home: Path) -> bool:
    # Consider IM enabled when any configured bridge has a plausible token/config
    def _has_token(d: Dict[str, Any], keys: Tuple[str, ...]) -> bool:
        for k in keys:
            v = d.get(k)
            if isinstance(v, str) and v.strip():
                return True
        return False

    tg = (home/"settings"/"telegram.yaml")
    if tg.exists():
        d = _read_yaml_or_json(tg)
        if _has_token(d, ("token",)):
            return True
        # Some setups only set autostart with environment token
        if bool(d.get("autostart", False)):
            return True
    sl = (home/"settings"/"slack.yaml")
    if sl.exists():
        d = _read_yaml_or_json(sl)
        if _has_token(d, ("app_token", "bot_token")):
            return True
    dc = (home/"settings"/"discord.yaml")
    if dc.exists():
        d = _read_yaml_or_json(dc)
        if _has_token(d, ("bot_token",)):
            return True
    return False

def _coach_mode(home: Path) -> str:
    cf = home/"settings"/"coach_helper.yaml"
    if not cf.exists():
        return "off"
    d = _read_yaml_or_json(cf)
    t = d.get("triggers") if isinstance(d.get("triggers"), dict) else {}
    mode = str(t.get("mode") or "off").lower().strip()
    if mode in ("off", "manual", "key_nodes"):
        return mode
    if mode == "on":
        return "key_nodes"
    return "off"

def _conversation_reset(home: Path) -> Tuple[str, Optional[int]]:
    gv = home/"settings"/"governance.yaml"
    if not gv.exists():
        return "compact", None
    d = _read_yaml_or_json(gv)
    c = d.get("conversation") if isinstance(d.get("conversation"), dict) else {}
    r = c.get("reset") if isinstance(c.get("reset"), dict) else {}
    policy = str(r.get("policy") or "compact").lower().strip()
    if policy not in ("compact", "clear"):
        policy = "compact"
    try:
        interval = int(r.get("interval_handoffs") or 0)
    except Exception:
        interval = 0
    return policy, (interval if interval > 0 else None)

def _write_rules_for_peer(home: Path, peer: str) -> Path:
    # Gather dynamic switches
    im_enabled = _is_im_enabled(home)
    coach = _coach_mode(home)
    reset_policy, reset_interval = _conversation_reset(home)
    # Paths
    base = f".cccc/mailbox/{peer}"
    to_user = f"{base}/to_user.md"
    to_peer = f"{base}/to_peer.md"
    patchf  = f"{base}/patch.diff"
    por_file = por_path(home)
    por_rel = por_file.as_posix()
    # Role bits
    is_peera = (peer.lower() == "peera" or peer == "peerA")
    role_name = "PeerA" if is_peera else "PeerB"
    other = "PeerB" if is_peera else "PeerA"
    to_user_line = (f"• To user:   write plain text to {to_user} (overwrite whole file; do NOT append)"
                    if is_peera else
                    "• To user:   (disabled for this peer; orchestrator ignores it)")
    # Compose text (English, concise)
    lines: list[str] = []
    lines.append(f"# {role_name} Rules (Generated)\n")
    lines.append(f"Generated by orchestrator. You are {role_name}. Collaborate with {other}.\n")
    lines.append("## Core Principles")
    lines.append("- Evidence-first; chat never changes state.")
    lines.append("- Small, reversible diffs (≤150 lines).")
    lines.append("- End every message with one fenced ```insight block.")
    lines.append("")
    lines.append("## Mailbox Contract")
    lines.append(to_user_line)
    lines.append(f"• To peer:   write plain text to {to_peer} (overwrite whole file; do NOT append)")
    lines.append(f"• Patch:     write unified diff only to {patchf}; keep changes small and reversible")
    lines.append("• Encoding: UTF‑8 (no BOM). Update files by overwriting them, never creating new ones with different encodings.")
    lines.append("")
    lines.append("## POR (Plan-of-Record)")
    lines.append(f"- Single source of direction: {por_rel}")
    lines.append("- Read/maintain at self-check or when direction changes by emitting a patch diff.")
    lines.append("")
    # IM — include only when enabled
    if im_enabled:
        lines.append("## IM Commands (enabled)")
        lines.append("- Route: `a: …`, `b: …`, `both: …` or `/a`, `/b`, `/both`. ")
        lines.append("- Focus: `/focus [hint]` requests POR refresh (PeerB acts).")
        lines.append("- Reset: `/reset compact|clear` (compact preferred).")
        lines.append("- Coach: `/coach status` or `/coach remind off|manual|key_nodes`.")
        lines.append("- Review: `/review` triggers coach reminder.")
        lines.append("- Passthrough: `a! <command>` / `b! <command>` sends raw CLI input to a peer.")
        lines.append("")
    # Coach — include only when not off
    if coach != "off":
        lines.append("## Third-Party Coach")
        lines.append(f"- Mode: {coach}. Stateless, short review at key nodes; you may be asked to act on its verdict.")
        lines.append("- If unavailable/timeout: proceed with baseline workflow and note it.")
        lines.append("")
    # Reset policy excerpt
    lines.append("## Context Hygiene")
    if reset_policy == "compact":
        lines.append("- Reset policy: compact (periodically condense context; prefer continuity).")
    else:
        lines.append("- Reset policy: clear (fresh start when requested).")
    if reset_interval:
        lines.append(f"- Auto-compact cadence: every ~{reset_interval} handoffs (effective).")
    lines.append("")
    # Role nuances
    lines.append("## Role Nuances")
    if is_peera:
        lines.append("- PeerA may speak to user (to_user.md). Lead framing, acceptance, and decisions.")
    else:
        lines.append("- PeerB must not write to user; focus on implementation, tests, and concise evidence.")
    lines.append("- Use PCR+Hook in to_peer.md; propose one smallest decisive next step (≤10m).")
    lines.append("")
    # Final hint
    lines.append("## When In Doubt")
    lines.append("- Re-read this file and the POR. Cite the clause you follow in your insight refs.")
    lines.append("")

    out = "\n".join(lines)
    rules_dir = _rules_dir(home)
    target = rules_dir/("PEERA.md" if is_peera else "PEERB.md")
    target.write_text(out, encoding="utf-8")
    return target

def ensure_rules_docs(home: Path):
    # Generate rules if missing or when config hash changed
    h = _calc_rules_hash(home)
    state = _state_dir(home)
    stamp = state/"rules_hash.json"
    old = {}
    try:
        old = json.loads(stamp.read_text(encoding="utf-8"))
    except Exception:
        old = {}
    if not (home/"rules"/"PEERA.md").exists() or not (home/"rules"/"PEERB.md").exists() or old.get("hash") != h:
        ensure_por(home)  # make sure POR exists for path rendering
        _write_rules_for_peer(home, "peerA")
        _write_rules_for_peer(home, "peerB")
        try:
            stamp.write_text(json.dumps({"hash": h}, ensure_ascii=False), encoding="utf-8")
        except Exception:
            pass


def _ensure_str(value: Any) -> str:
    if value is None:
        return ""
    if isinstance(value, str):
        return value.strip()
    return str(value).strip()


def weave_system_prompt(home: Path, peer: str, por: Optional[Dict[str, Any]] = None) -> str:
    """
    Runtime SYSTEM prompt for mailbox mode — lean but complete.
    Principles:
    - Avoid fluff; keep actionable rules and paths crystal clear.
    - Do not omit essentials (outbox discipline for to_user/to_peer, patch workflow, Telegram files, insight invariant, safety).
    - Prefer precise phrasing over repetition; remove duplicates while preserving information.
    """
    peer = (peer or "peerA").strip()
    other = "peerB" if peer.lower() == "peera" or peer == "peerA" else "peerA"

    mb_base = f".cccc/mailbox/{peer}"
    to_user = f"{mb_base}/to_user.md"
    to_peer = f"{mb_base}/to_peer.md"
    patchf  = f"{mb_base}/patch.diff"

    # Ensure rules are present/up-to-date before composing SYSTEM
    try:
        ensure_rules_docs(home)
    except Exception:
        pass

    lines = []
    lines.append("CCCC Mailbox Contract (runtime)")
    lines.append("")

    ensure_por(home)
    por_file = por_path(home)
    lines.append("Plan-of-Record (POR):")
    lines.append(f"• Single source: {por_file.as_posix()} — update this document at self-check or whenever direction changes.")
    lines.append("• Read and maintain the POR (objectives, roadmap, risks, decisions) via patch diff; do not rely on old prompt text.")
    lines.append("")

    # Point to role-specific rules doc (generated)
    try:
        rules_path = (home/"rules"/("PEERA.md" if (peer.lower()=="peera" or peer=="peerA") else "PEERB.md")).as_posix()
        lines.append("Rules (role-specific):")
        lines.append(f"• Read and follow: {rules_path}")
        lines.append("")
    except Exception:
        pass

    # Why (purpose) — make collaboration resemble two human experts, not an autopilot
    lines.append("Why (purpose):")
    lines.append("• The trailing ```insight block is not a format tax: it enforces a moment of reflection and an explicit next move or counter. This resists quick, shallow ‘autopilot’ replies and raises decision density.")
    lines.append("• Side quests as TODOs (PROJECT.md or other shared docs) externalize intent and ask for consent. This reduces context thrash, welcomes rework when evidence changes, and protects the mainline from derailment.")
    lines.append("• Act like human experts: suspend early judgment, probe from multiple angles, time‑box small experiments (≤10 min), communicate trade‑offs, and be willing to change course when a better path appears.")
    lines.append("")
    # Boot context (lightweight): current time/TZ (computed at runtime)
    try:
        import datetime as _dt
        now = _dt.datetime.now(_dt.timezone.utc).astimezone()
        tz = now.strftime('%z')
        tz_fmt = f"UTC{tz[:3]}:{tz[3:]}" if tz else "local"
        lines.append("Boot Context:")
        lines.append(f"• Now: {now.strftime('%Y-%m-%d %H:%M')} {tz_fmt}")
        lines.append("")
    except Exception:
        pass
    lines.append(f"You are {peer}. Collaborate with {other}. Start in standby; do not initiate tasks without explicit user instruction.")
    lines.append("")
    lines.append("Mailbox (the only authoritative channel):")
    if peer.lower() == 'peera' or peer == 'peerA':
        lines.append(f"• To user:   write plain text to {to_user} (overwrite whole file; do NOT append)")
    else:
        lines.append("• To user:   (disabled for this peer; orchestrator ignores it)")
    lines.append(f"• To peer:   write plain text to {to_peer} (overwrite whole file; do NOT append)")
    lines.append(f"• Patch:     write unified diff only to {patchf}; keep changes small and reversible")
    lines.append("")
    lines.append("Encoding Discipline:")
    lines.append("• Always write/update .cccc/mailbox/**/{to_user.md,to_peer.md,patch.diff} as UTF‑8 (no BOM).")
    lines.append("• Update-only semantics: treat to_user.md/to_peer.md as pre-existing files and replace their entire content; do NOT create or 'write new' these files (avoid tool defaults changing encoding).")
    lines.append("")
    lines.append("IM Bridges (unified):")
    lines.append("• Routing: only messages with explicit prefix are forwarded — a:/b:/both:. Use 'showpeers on|off' to toggle Peer↔Peer summaries (global). Others are ignored as chatter.")
    lines.append("• Inbound: uploads are saved to .cccc/work/upload/inbound/YYYYMMDD/MID__name with a sibling .meta.json (platform/chat-or-channel/mime/bytes/sha256/caption/mid/ts); also indexed into state/inbound-index.jsonl.")
    lines.append("• Outbound: drop files into .cccc/work/upload/outbound/ (flat). Use the first line of <name>.caption.txt to route with a:/b:/both: (prefix is removed), or a <name>.route sidecar with a|b|both. On success a <name>.sent.json ACK is written.")
    lines.append("• Platform details are abstracted by adapters; do not rely on platform-specific folders. Cite files by their saved path and meta.")
    lines.append("")
    lines.append("Rules:")
    lines.append("• Evidence‑first; single‑branch, small steps (≤150 changed lines). Only EVIDENCE (diff/tests/logs/bench) changes code state.")
    lines.append("• to_user.md: brief goals/progress/decisions; include references to evidence when helpful.")
    lines.append("• to_peer.md: use CLAIM/COUNTER/EVIDENCE/QUESTION; keep negotiation focused and overwrite (no append).")
    lines.append("• Patch workflow: provide a unified diff; small and reversible. Inline patches in to_peer are allowed; they follow the same preflight and limits.")
    lines.append("• Protected domain: .cccc/** is orchestrator runtime; do not modify orchestrator code/config/policies.")
    lines.append("• RFD (decision card): use for irreversible/high‑impact changes or deadlocks; keep YAML minimal and focused on alternatives/impact/rollback/default/time limit.")
    # Minimal RFD guidance (enable inline card + gate): keep YAML alone in to_peer when you need a decision
    lines.append("• RFD card: use it mainly for 1) A/B disagreement with low confidence; 2) irreversible/high‑impact changes (schema/public API/security/release); or 3) protected areas. Minimal YAML example in to_peer:")
    lines.append("  type: CLAIM")
    lines.append("  intent: rfd")
    lines.append("  title: 'Request exception for large diff'  # or short topic")
    lines.append("  # optional id; omit to auto-generate")
    lines.append("  tasks:")
    lines.append("    - desc: 'Alternatives/Impact/Rollback/Default/Time limit'  # one line summary")
    lines.append("• If present, read PROJECT.md (repo root) for the project brief and scope. Do not initiate without user instruction; propose a TODO instead.")
    lines.append("")
    # Session markers (for context)
    lines.append("Markers you may see:")
    lines.append("• <FROM_USER>..</FROM_USER>")
    lines.append(f"• <FROM_{other.capitalize()}>..</FROM_{other.capitalize()}>")
    lines.append("• <FROM_SYSTEM>..</FROM_SYSTEM>")
    # Delivery MID is informational; no explicit echo required.
    lines.append("")
    # INSIGHT invariant (high‑level meta channel)
    lines.append("INSIGHT invariant (meta‑only; not a body duplicate):")
    lines.append("• Append exactly one trailing fenced ```insight block to every message. Do not restate or summarize the body; write only meta: a new hook/assumption/risk/trade‑off/next or a revise delta.")
    lines.append("  Example:\n  ```insight\n  to: peerB  |  kind: ask\n  msg: Two valid interpretations → write one acceptance example each, then converge\n  refs: [LOG:tests#L12-28]\n  ```")
    lines.append("• Start the first line with a lens (meta stance), e.g., lens: clarity|risk|tradeoff|assumption|next|revise. No code/patch in insight; if you need details, put them in the body and keep insight meta‑only.")
    # Tone & GPS (concise rule; warm only in allowed areas)
    lines.append("• Tone: warm, concise, professional. Warm phrases or light humor are allowed only in to_user.md and in the trailing ```insight; keep the to_peer.md body strictly neutral, precise, and evidence‑driven.")
    lines.append("• If two consecutive turns focus on the same detail without new evidence, add a three‑line GPS in the insight block: Goal (why this step), Partner (the ask for the other peer), Step (the next minimal action + evidence). Otherwise omit GPS.")
    lines.append("")
    lines.append("Speak‑up triggers (minimal, high‑signal):")
    lines.append("• If you have a small result: send EVIDENCE (small patch/test; else a 3–5 line stable log with cmd/LOC).")
    lines.append("• If you have a next step but no result: send a short CLAIM (1–3 tasks with constraints + acceptance).")
    lines.append("• If blocked by one uncertainty: ask a single, answerable QUESTION (focused, decidable).")
    lines.append("• If you disagree: steelman first, then send COUNTER with a repro note or metric. Otherwise only ACK.")
    lines.append("")
    lines.append("When you see [NUDGE]: read the oldest file in your inbox; after processing move it to processed/ (same mailbox). Repeat until empty. Reply only if blocked.")
    # Peer-specific collaboration norms (strong guidance)
    if peer.lower() == 'peera' or peer == 'peerA':
        lines.append("")
        lines.append("Collaboration Norms (PeerA):")
        lines.append("• Before modifying code: propose a concise CLAIM (constraints + acceptance) and wait for PeerB's ACK/COUNTER/QUESTION; then submit a small patch.")
        lines.append("• Avoid unilateral file edits; keep changes discussable and reversible (≤150 changed lines by default).")
    else:
        lines.append("")
        lines.append("Behavior for user instructions (peerB):")
        lines.append("• Do not act immediately; wait for PeerA's framing. Use to_peer.md for questions or EVIDENCE. Never write to to_user.md.")
        lines.append("")
        lines.append("Collaboration Norms (PeerB):")
        lines.append("• After applying a patch: send a 1–2 line EVIDENCE report to PeerA (commit, tests ok/fail, lines, paths, MID) before going silent.")
        lines.append("• Prefer incremental, testable changes; when blocked, ask one focused question.")
    lines.append("Follow the mailbox contract. Start in standby; wait for explicit instruction before initiating tasks.")
    return "\n".join(lines)


def weave_preamble(home: Path, peer: str, por: Optional[Dict[str, Any]] = None) -> str:
    """
    Preamble text used for the first user message — identical source as SYSTEM
    to ensure single-source truth. By default returns weave_system_prompt.
    """
    return weave_system_prompt(home, peer, por)
